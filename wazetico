#lang racket
(require racket/gui)
(require racket/draw/arrow)
(require "grafoLogica.rkt")


;; Variables


;Destino inicial de la ruta
(define initial-destiny "")


;Destino final de la ruta
(define final-destiny "")


;Lista de Nodos con coordenadas
(define nodes-list '(
        (11 442 299) (12 343 329) (13 540 349) (14 638 398)
        (21 393 239) (22 432 139) (23 265 60)
        (31 589 299) (32 687 269)
        (41 501 189) (42 540 120)
        (51 98 209) (52 147 90)
        (61 294 209) (62 736 448)
        (71 668 179) (72 736 359)
     )
  )


;Grafo
(define graph '( (51 ((52 9)))
                 (52 ((23 8)))
                 (23 ((61 9) (22 8)))
                 (61 ((23 9) (51 10) (21 4)))
                 (21 ((61 4) (22 5) (12 3)))
                 (22 ((21 5)))
                 (12 ((11 2)))
                 (11 ((41 6) (31 2)))
                 (41 ((11 6) (42 2) (71 4)))
                 (42 ((22 3)))
                 (71 ((32 5)))
                 (32 ((31 2) (72 4)))
                 (31 ((32 2) (11 2) (13 1)))
                 (13 ((14 3)))
                 (14 ((72 6)))
                 (62 ((14 7)))
                 (72 ((62 10) (14 6) (32 4)))
                )
  )


;Color list
(define color-list '("LightCoral" "Red" "Orange" "Olive" "Yellow"
                                 "Green" "Turquoise" "Blue" "Purple"
                                 "LightCoral" "Olive" "Spring Green"
                                 "DeepSkyBlue" "Light Steel Blue"
                                 "Magenta" "Medium Sea Green" "Chocolate" )
                                 )


;Variable de estado de seleccion de rutas
(define path-selection -1)

;Estado de seleccion de rutas
(define search-state "")


;Pens
(define no-pen (make-object pen% "BLACK" 1 'transparent))
(define no-brush (make-object brush% "BLACK" 'transparent))
(define one-way-pen (make-object pen% "SILVER" 2 'solid))
(define two-way-pen (make-object pen% "DARK MAGENTA" 2 'solid))
(define black-pen (make-object pen% "BLACK" 2 'solid))


;Brushes
(define green-brush (make-object brush% "GREEN" 'solid))
(define yellow-green-brush (make-object brush% "YELLOW GREEN" 'solid))
(define dark-green-brush (make-object brush% "DARK GREEN" 'solid))
(define aquamarine-brush (make-object brush% "AQUAMARINE" 'solid))
(define medium-turquoise-brush (make-object brush% "MEDIUM TURQUOISE" 'solid))
(define blue-brush (make-object brush% "BLUE" 'solid))
(define royal-blue-brush (make-object brush% "ROYAL BLUE" 'solid))
(define black-brush (make-object brush% "BLACK" 'solid))



;;Funciones


;;Funciones iniciales

;Funcion para encontrar la coordenada deseada de un nodo
;Parametros:
;   nodo: numero de ciudad
;   pos: coordenada ("x" o "y")
(define (get-coord nodo pos)
  (get-coord-aux nodo pos nodes-list)
    )

;Funcion auxiliar para encontrar la coordenada deseada de un nodo
;Parametros:
;   nodo: numero de ciudad
;   pos: coordenada ("x" o "y")
;   list: nodes-list
(define (get-coord-aux nodo pos list)
  (cond( (null? list)
         -1)
       ( (equal? nodo (caar list))
         (cond( (equal? pos "x")
                (cadar list)
               )
              ( (equal? pos "y")
                (caddar list)
               )
              (else
               -1)
           )
        )
       (else
        (get-coord-aux nodo pos (cdr list))
        )
   )
)


;Funcion para dibujar un nodo
;Parametros:
;   dc: Drawing Context
;   node: numero de ciudad
;   x: coordenada en x
;   y: coordenada en y
(define (draw-node dc node x y)

  (cond ( (equal? (quotient node 10) 1)
          (send dc set-brush green-brush)
         )
        ( (equal? (quotient node 10) 2)
          (send dc set-brush yellow-green-brush)
         )
        ( (equal? (quotient node 10) 3)
          (send dc set-brush dark-green-brush)
         )
        ( (equal? (quotient node 10) 4)
          (send dc set-brush aquamarine-brush)
         )
        ( (equal? (quotient node 10) 5)
          (send dc set-brush royal-blue-brush)
         )
        ( (equal? (quotient node 10) 6)
          (send dc set-brush blue-brush)
         )
        ( (equal? (quotient node 10) 7)
          (send dc set-brush medium-turquoise-brush)
         )
        (else
         (send dc set-brush black-brush)
         )
    )

  (send dc set-pen no-pen)
  (send dc draw-ellipse x y 20 20)
 
)


;Funcion para dibujar todos los nodos al iniciar la aplicacion
;Llama a una funcion auxiliar
(define (draw-all-nodes)
  (draw-all-nodes-aux nodes-list dc)
  )

;Funcion auxiliar para dibujar todos los nodos al iniciar la aplicacion
;Parametros:
;   list: nodes-list
;   dc: Drawing Context
(define (draw-all-nodes-aux list dc)
  (cond ( (null? (cdr list) )
              (draw-node dc (caar list) (cadar list) (caddar list) )
           )
        (else
             (draw-node dc (caar list) (cadar list) (caddar list) )
             (draw-all-nodes-aux (cdr list) dc)
         )
  )
)


;Funcion para dibujar una linea
;Parametros:
;   ini: nodo inicial
;   fin: nodo final
;   way: cantidad de vias (1 o 2)
(define (draw-line dc ini fin way)
  (cond ( (equal? way 1)
          ;Cambia al pen para una via
          (send dc set-pen one-way-pen)
          ;Dibuja solo las flechas de los caminos de una sola via
          (draw-arrows (+ 10 (get-coord ini "x")) (+ 10 (get-coord ini "y"))
              (+ 10 (get-coord fin "x")) (+ 10 (get-coord fin "y")) )
         )
        ( (equal? way 2)
          ;Cambia al pen para dos vias
          (send dc set-pen two-way-pen)
         )
    )
  ;Manda a dibujar la linea
  (send dc draw-line
        (+ 10 (get-coord ini "x")) (+ 10 (get-coord ini "y"))
        (+ 10 (get-coord fin "x")) (+ 10 (get-coord fin "y")) )
        ; + 10 ya que el nodo tiene radio de 20 -> asi la linea queda en el medio
  )


;Funcion para dibujar todas las lineas (inicio de aplicacion)
(define (draw-all-lines)
  (draw-all-lines-aux graph)
  )

;Funcion auxiliar para dibujar todas las lineas (inicio de aplicacion)
;Parametros:
;   graph: graph
(define (draw-all-lines-aux graph)
  (cond ( (null? (cdr graph) )
          (draw-lines-by-node dc (caar graph) (cadar graph))
         )
        (else         
         (draw-lines-by-node dc (caar graph) (cadar graph))
         (draw-all-lines-aux (cdr graph) ) ;Elimina el primer nodo del grafo
         )
    )
  )


;Funcion para dibujar lineas de un nodo especifico
;Parametros:
;   dc: Drawing Context
;   node: nodo inicial
;   connections: lista de nodos que finalizan la linea
(define (draw-lines-by-node dc node connections)
  (cond ( (null? (cdr connections) )
          (draw-line dc node (caar connections) (check-ways (caar connections) node) )
         )
        (else
         (draw-line dc node (caar connections) (check-ways (caar connections) node) )
         (draw-lines-by-node dc node (cdr connections) )
         )
    )
  )

;Funcion para verificar si el camino es one-way o two-way
;Parametros:
;   node: nodo por verificar
;   fin: nodo por encontrar camino
(define (check-ways node fin)
  (check-ways-aux node fin graph)
  )

;Funcion auxiliar para verificar si el camino es one-way o two-way
;   node: nodo por verificar
;   fin: nodo por encontrar camino
;   graph: graph
(define (check-ways-aux node fin graph)
  (cond ( (null? graph)
          1
         )
        ( (equal? node (caar graph))
          (cond ( (path? fin (cadar graph) )
                  2
                 )
                (else
                 (check-ways-aux node fin (cdr graph) )
                 )
                )
         )
        (else
         (check-ways-aux node fin (cdr graph) )
         )
  )
  )

;Funcion para verificar si existe un path a la inversa del ya encontrado
;Parametros:
;   fin: nodo final que pasa a ser inicial
;   connections: lista de nodos que finalizarian la linea
(define (path? fin connections)
  (cond ( (null? connections)
          #f
         )
        ( (equal? fin (caar connections) )
          #t
          )
        (else
         (path? fin (cdr connections) )
         )
    )
 )


;Funcion para dibujar una flecha cerca de la linea
;Parametros:
;
;
;
;
(define (draw-arrows x1 y1 x2 y2)
  (draw-arrow dc (/ (+ x1 (/ (+ x1 x2) 2)) 2) (/ (+ y1 (/ (+ y1 y2) 2)) 2)
              (/ (+ (/ (+ x1 x2) 2) x2) 2) (/ (+ (/ (+ y1 y2) 2) y2) 2) 10 10)
  )


;Funcion para mostrar el peso de la linea cerca de esta
(define (draw-weight)
  #t
  )



;;Funciones post-inicio


;Funcion para iniciar la busqueda de los caminos
(define (begin-search)
  (cond ( (equal? #t (check-fields)) ;Si los campos de texto estan correctos
          ;Se informa en el text-box sobre la busqueda
          (search-info)
          
          ;Se inicia la busqueda de los caminos dependiendo del estado de seleccion del usuario
          (search-by-state)
         )
    )
 )




;Funcion para verificar los fields antes de buscar las rutas
(define (check-fields)
  (cond ( (equal? #f (check-destiny-field initial-destiny nodes-list) )
        ;Si el destino inicial no esta en los nodos
          (send instructions-text-field set-value
              "El destino inicial seleccionado no existe.\nIngrese un nuevo destino." )
          #f
        )
        ( (equal? #f (check-destiny-field final-destiny nodes-list) )
        ;Si el destino final no esta en los nodos
          (send instructions-text-field set-value
              "El destino final seleccionado no existe.\nIngrese un nuevo destino." )
          #f
        )
        (else
         #t
         )
  )
)

;Funcion para verificar las escogencias de los text-fields de los destinos
;Parametros:
;   text: string escrito en text-box
;   list: nodes-list
(define (check-destiny-field text list)
  (cond ( (null? list)
          #f
         )
        ( (equal? text ( number->string (caar list)) )
          #t
         )
        (else
         (check-destiny-field text (cdr list))
         )
    )
  )


;Funcion para cambiar el texto de instructions-text-field al presionar "Search"
(define (search-info)
(cond ( (equal? 0 path-selection)
        (set! search-state "Camino más corto" )
       )
      ( (equal? 1 path-selection)
        (set! search-state "Todos los caminos" )
       )
      )

  (send instructions-text-field set-value (string-append
                                           "Tipo de Busqueda: " search-state
                                           "\n\nDestino Inicial: " initial-destiny
                                           "\nDestino Final: " final-destiny
                                           )
        )
  )


;Funcion para empezar la busqueda de caminos dependiendo de la seleccion del usuario
(define (search-by-state)
  (cond ( (equal? 0 path-selection)
          
         )
        ( (equal? 1 path-selection)
          
         )
        (else
         (send instructions-text-field set-value "Tipo de Busqueda no seleccionado."
         )
    )
  )


;Funcion para enviar a buscar las rutas
(define (send-destinies)
  (test-search-paths initial-destiny final-destiny graph (number->string path-selection))
  )



;Funcion test para buscar rutas
(define (test-search-paths ini fin graph npaths)
  (send instructions-text-field set-value (string-append
                                           "Searching paths: " npaths ".\n"
                                           ini " -> " fin) )

(send instructions-text-field set-value (string-append (number->string (caaar (buscaCaminos (string->number ini) (string->number fin) grafo)) )
                                                       (number->string (cadaar (buscaCaminos (string->number ini) (string->number fin) grafo)) )
                                                       ) )
  ;(string->number ini) (string->number fin)
)






;Funcion para dibujar una ruta


;Funcion para dibujar todas las rutas
;o dibujar la ruta seleccionada







;;Widgets



;;;Pantalla Inicial


;Frame inicial
(define initial-frame (new frame% [label "WazeTico"]
                   [width 400]
                   [height 200]
                   [alignment '(center center)]))


;Panel vertical
;Incluye title y hpanel-initial
(define vpanel-initial (new vertical-panel% [parent initial-frame]
                            [alignment '(center center)]))


; Make a static text message in the frame
(define title (new message% [parent vpanel-initial]
                          [label "WazeTico"]))


;Panel horizontal
(define hpanel-initial (new horizontal-panel% [parent vpanel-initial]
                            [alignment '(center center)]))


;Boton Undo
(define initial-initialize-buton (new button% [parent hpanel-initial]
             [label "Initialize"]
             [vert-margin 10]	 
             [horiz-margin 5]
             [callback (lambda (button event)
                         ;Cierra la ventana inicial
                         (send initial-frame show #f)
                         ;Abre la ventana principal
                         (send main-frame show #t)
                         ; Wait a second to let the window get ready
                         (sleep/yield 1)
                         ;Initial draws
                         (draw-all-lines)
                         (draw-all-nodes)
                         )]))


;Boton Help!
(define initial-help-buton (new button% [parent hpanel-initial]
             [label "Help!"]
             [vert-margin 10]	 
             [horiz-margin 5]
             ;[callback (lambda (button event))]

                         ))
                  



;;;Pantalla Principal


; Frame principal
(define main-frame (new frame% [label "WazeTico"]
                   [width 1100]
                   [height 660]
                   [alignment '(left top)]))


;Panel principal (horizontal)
(define main-panel (new horizontal-panel% [parent main-frame]
                        ))


;Panel vertical
;Incluye cavas(mapa) y panel horizontal secundario
(define vpanel (new vertical-panel% [parent main-panel]))


;Canvas donde se muestra el grafo
(define map-canvas (new canvas% [parent vpanel]
                       [style '(border)]
                       [label "MAP"] 
                       [vert-margin 10]	 
                       [horiz-margin 10]
                       [min-height 500]))


;Drawing Context de map-canvas
(define dc (send map-canvas get-dc))


;Panel horizontal secundario
;Incluye text-field (instrucciones) y vpanel2 (botones)
(define hpanel2 (new horizontal-panel% [parent vpanel]
                     [alignment '(center center)]))


;Text-field de instrucciones
(define instructions-text-field ( new text-field% [parent hpanel2]
                                    [label #f]
                                    [init-value
                                     "Bienvenidos a WazeTico!\n
Favor ingrese el destino inicial y el destino final.\n"]
                                    [vert-margin 10]	 
                                    [horiz-margin 10]
                                    [min-width 600]
                                    [min-height 120]))

;Panel horizontal terciario
;
(define hpanel3 (new horizontal-panel% [parent hpanel2]
                     [alignment '(center center)]
                     ;[vert-margin 10]	 
                     ;[horiz-margin 10]
                     ))


;Panel vertical secundario
;
(define vpanel2 (new vertical-panel% [parent hpanel2]
                     [alignment '(center center)]))


;Text-field de instrucciones
(define initial-text-field ( new text-field% [parent vpanel2]
                                    [label #f]
                                    ;[init-value ""]
                                    ;[vert-margin 10]	 
                                    ;[horiz-margin 10]
                                    [min-width 10]
                                    ;[min-height 20]
                                    ))


(define intial-label (new message% [parent vpanel2]
                          [label "Initial"]))

;Text-field de instrucciones
(define final-text-field ( new text-field% [parent vpanel2]
                                    [label #f]
                                    ;[init-value ""]
                                    ;[vert-margin 10]	 
                                    ;[horiz-margin 10]
                                    [min-width 10]
                                    ;[min-height 20]
                                    ))

(define final-label (new message% [parent vpanel2]
                          [label "Final"]))


;Panel vertical terciario
;
(define vpanel3 (new vertical-panel% [parent hpanel2]
                     [alignment '(center center)]
                     ;[vert-margin 5]	 
                     ;[horiz-margin 5]
                     ))


;Radio Button Selection
(define rbuttons (new radio-box% [label ""]
     [choices '("Shortest Path" "All Paths")]
     [parent vpanel3]
    ; [callback (lambda (control-event))
                 ;(set path-selection (send rbuttons get-selection)) )
                   ; ]
))
     

;Boton Search
(new button% [parent vpanel3]
             [label "Begin Search"]
             [callback (lambda (button event)
                         ;Ingresa el texto de los fields a sus respectivas variables
                         (set! initial-destiny (send initial-text-field get-value))
                         (set! final-destiny (send  final-text-field get-value))
                         (set! path-selection (send rbuttons get-selection) )

                         (begin-search)
                         
                        ;Para dejar de mostrar los botones
                         ;(send rbuttons show #f)

                         )])





;Boton Undo
;(new button% [parent hpanel3]
;             [label "Undo"]
;             [vert-margin 10]	 
;             [horiz-margin 5]
;             [callback (lambda (button event)
;                       (send instructions-text-field set-value "Undo Button"))])


;Boton New Path
(new button% [parent vpanel3]
             [label "New Path"]
             [vert-margin 10]	 
             [horiz-margin 5]
             [callback (lambda (button event)
                       (send instructions-text-field set-value "New Path")
                         (send main-frame show #f))])


;Text-field de informacion
(define information-text-field ( new text-field% [parent main-panel]
                                    [label #f]
                                    [vert-margin 10]	 
                                    [horiz-margin 10]
                                    [min-width 160]
                                    [min-height 640]))


;; Initial


; Se muestra el frame inicial
(send initial-frame show #t)
